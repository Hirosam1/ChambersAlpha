[gd_resource type="Shader" format=3 uid="uid://cpmujfi6nxk23"]

[resource]
code = "shader_type spatial;
render_mode unshaded, cull_disabled;
/** Tileset texture to be used. */
uniform sampler2D tileset_texture : source_color, filter_nearest, repeat_disable;
/** The number of tiles on the X and Y axis. */
uniform ivec2 tex_dims;
/** The position of the texture. */
uniform int tex_pos;

varying vec2 tiled_uv;

vec2 get_tr_uv(vec2 uv){
	float h_a = 1.0/float(tex_dims.x), v_a = 1.0/float(tex_dims.y);
	float h_bias = float(tex_pos % tex_dims.x)/float(tex_dims.x);
	float v_bias = float((tex_pos/tex_dims.x) % tex_dims.y)/float(tex_dims.y);
	return vec2(uv.x * h_a + h_bias, uv.y * v_a + v_bias);
}

void vertex(){
	/*Calculate new UV coordinates using varying on vertex step
	to minimize calculations.*/
	tiled_uv = get_tr_uv(UV);
}

void fragment() {
	vec4 tex_color = texture(tileset_texture,tiled_uv);
	if(tex_color.a < 0.1){
		discard;
	}
	ALBEDO.rgb = tex_color.rgb;
}"
